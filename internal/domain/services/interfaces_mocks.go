// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qskkk/git-fleet/internal/domain/services (interfaces: ExecutionService,StatusService,ConfigService,ValidationService,LoggingService)
//
// Generated by this command:
//
//	mockgen -package=services -destination=interfaces_mocks.go github.com/qskkk/git-fleet/internal/domain/services ExecutionService,StatusService,ConfigService,ValidationService,LoggingService
//

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	entities "github.com/qskkk/git-fleet/internal/domain/entities"
	logger "github.com/qskkk/git-fleet/internal/pkg/logger"
	gomock "go.uber.org/mock/gomock"
)

// MockExecutionService is a mock of ExecutionService interface.
type MockExecutionService struct {
	ctrl     *gomock.Controller
	recorder *MockExecutionServiceMockRecorder
	isgomock struct{}
}

// MockExecutionServiceMockRecorder is the mock recorder for MockExecutionService.
type MockExecutionServiceMockRecorder struct {
	mock *MockExecutionService
}

// NewMockExecutionService creates a new mock instance.
func NewMockExecutionService(ctrl *gomock.Controller) *MockExecutionService {
	mock := &MockExecutionService{ctrl: ctrl}
	mock.recorder = &MockExecutionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutionService) EXPECT() *MockExecutionServiceMockRecorder {
	return m.recorder
}

// ExecuteBuiltInCommand mocks base method.
func (m *MockExecutionService) ExecuteBuiltInCommand(ctx context.Context, cmdName string, groups []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteBuiltInCommand", ctx, cmdName, groups)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteBuiltInCommand indicates an expected call of ExecuteBuiltInCommand.
func (mr *MockExecutionServiceMockRecorder) ExecuteBuiltInCommand(ctx, cmdName, groups any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteBuiltInCommand", reflect.TypeOf((*MockExecutionService)(nil).ExecuteBuiltInCommand), ctx, cmdName, groups)
}

// ExecuteCommand mocks base method.
func (m *MockExecutionService) ExecuteCommand(ctx context.Context, groups []string, cmd *entities.Command) (*entities.Summary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteCommand", ctx, groups, cmd)
	ret0, _ := ret[0].(*entities.Summary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteCommand indicates an expected call of ExecuteCommand.
func (mr *MockExecutionServiceMockRecorder) ExecuteCommand(ctx, groups, cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteCommand", reflect.TypeOf((*MockExecutionService)(nil).ExecuteCommand), ctx, groups, cmd)
}

// GetAvailableCommands mocks base method.
func (m *MockExecutionService) GetAvailableCommands(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableCommands", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableCommands indicates an expected call of GetAvailableCommands.
func (mr *MockExecutionServiceMockRecorder) GetAvailableCommands(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableCommands", reflect.TypeOf((*MockExecutionService)(nil).GetAvailableCommands), ctx)
}

// IsBuiltInCommand mocks base method.
func (m *MockExecutionService) IsBuiltInCommand(cmdName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBuiltInCommand", cmdName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBuiltInCommand indicates an expected call of IsBuiltInCommand.
func (mr *MockExecutionServiceMockRecorder) IsBuiltInCommand(cmdName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBuiltInCommand", reflect.TypeOf((*MockExecutionService)(nil).IsBuiltInCommand), cmdName)
}

// ParseCommand mocks base method.
func (m *MockExecutionService) ParseCommand(ctx context.Context, cmdStr string) (*entities.Command, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseCommand", ctx, cmdStr)
	ret0, _ := ret[0].(*entities.Command)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseCommand indicates an expected call of ParseCommand.
func (mr *MockExecutionServiceMockRecorder) ParseCommand(ctx, cmdStr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseCommand", reflect.TypeOf((*MockExecutionService)(nil).ParseCommand), ctx, cmdStr)
}

// ValidateCommand mocks base method.
func (m *MockExecutionService) ValidateCommand(ctx context.Context, cmd *entities.Command) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateCommand", ctx, cmd)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateCommand indicates an expected call of ValidateCommand.
func (mr *MockExecutionServiceMockRecorder) ValidateCommand(ctx, cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCommand", reflect.TypeOf((*MockExecutionService)(nil).ValidateCommand), ctx, cmd)
}

// MockStatusService is a mock of StatusService interface.
type MockStatusService struct {
	ctrl     *gomock.Controller
	recorder *MockStatusServiceMockRecorder
	isgomock struct{}
}

// MockStatusServiceMockRecorder is the mock recorder for MockStatusService.
type MockStatusServiceMockRecorder struct {
	mock *MockStatusService
}

// NewMockStatusService creates a new mock instance.
func NewMockStatusService(ctrl *gomock.Controller) *MockStatusService {
	mock := &MockStatusService{ctrl: ctrl}
	mock.recorder = &MockStatusServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusService) EXPECT() *MockStatusServiceMockRecorder {
	return m.recorder
}

// GetAllStatus mocks base method.
func (m *MockStatusService) GetAllStatus(ctx context.Context) ([]*entities.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllStatus", ctx)
	ret0, _ := ret[0].([]*entities.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllStatus indicates an expected call of GetAllStatus.
func (mr *MockStatusServiceMockRecorder) GetAllStatus(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllStatus", reflect.TypeOf((*MockStatusService)(nil).GetAllStatus), ctx)
}

// GetGroupStatus mocks base method.
func (m *MockStatusService) GetGroupStatus(ctx context.Context, groupName string) ([]*entities.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupStatus", ctx, groupName)
	ret0, _ := ret[0].([]*entities.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupStatus indicates an expected call of GetGroupStatus.
func (mr *MockStatusServiceMockRecorder) GetGroupStatus(ctx, groupName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupStatus", reflect.TypeOf((*MockStatusService)(nil).GetGroupStatus), ctx, groupName)
}

// GetMultiGroupStatus mocks base method.
func (m *MockStatusService) GetMultiGroupStatus(ctx context.Context, groupNames []string) ([]*entities.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMultiGroupStatus", ctx, groupNames)
	ret0, _ := ret[0].([]*entities.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMultiGroupStatus indicates an expected call of GetMultiGroupStatus.
func (mr *MockStatusServiceMockRecorder) GetMultiGroupStatus(ctx, groupNames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultiGroupStatus", reflect.TypeOf((*MockStatusService)(nil).GetMultiGroupStatus), ctx, groupNames)
}

// GetRepositoryStatus mocks base method.
func (m *MockStatusService) GetRepositoryStatus(ctx context.Context, repoName string) (*entities.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryStatus", ctx, repoName)
	ret0, _ := ret[0].(*entities.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositoryStatus indicates an expected call of GetRepositoryStatus.
func (mr *MockStatusServiceMockRecorder) GetRepositoryStatus(ctx, repoName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryStatus", reflect.TypeOf((*MockStatusService)(nil).GetRepositoryStatus), ctx, repoName)
}

// RefreshStatus mocks base method.
func (m *MockStatusService) RefreshStatus(ctx context.Context, repos []*entities.Repository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshStatus", ctx, repos)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshStatus indicates an expected call of RefreshStatus.
func (mr *MockStatusServiceMockRecorder) RefreshStatus(ctx, repos any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshStatus", reflect.TypeOf((*MockStatusService)(nil).RefreshStatus), ctx, repos)
}

// ValidateRepository mocks base method.
func (m *MockStatusService) ValidateRepository(ctx context.Context, repo *entities.Repository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRepository", ctx, repo)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateRepository indicates an expected call of ValidateRepository.
func (mr *MockStatusServiceMockRecorder) ValidateRepository(ctx, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRepository", reflect.TypeOf((*MockStatusService)(nil).ValidateRepository), ctx, repo)
}

// MockConfigService is a mock of ConfigService interface.
type MockConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockConfigServiceMockRecorder
	isgomock struct{}
}

// MockConfigServiceMockRecorder is the mock recorder for MockConfigService.
type MockConfigServiceMockRecorder struct {
	mock *MockConfigService
}

// NewMockConfigService creates a new mock instance.
func NewMockConfigService(ctrl *gomock.Controller) *MockConfigService {
	mock := &MockConfigService{ctrl: ctrl}
	mock.recorder = &MockConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigService) EXPECT() *MockConfigServiceMockRecorder {
	return m.recorder
}

// AddGroup mocks base method.
func (m *MockConfigService) AddGroup(ctx context.Context, group *entities.Group) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGroup", ctx, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddGroup indicates an expected call of AddGroup.
func (mr *MockConfigServiceMockRecorder) AddGroup(ctx, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGroup", reflect.TypeOf((*MockConfigService)(nil).AddGroup), ctx, group)
}

// AddRepository mocks base method.
func (m *MockConfigService) AddRepository(ctx context.Context, name, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRepository", ctx, name, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRepository indicates an expected call of AddRepository.
func (mr *MockConfigServiceMockRecorder) AddRepository(ctx, name, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRepository", reflect.TypeOf((*MockConfigService)(nil).AddRepository), ctx, name, path)
}

// CreateDefaultConfig mocks base method.
func (m *MockConfigService) CreateDefaultConfig(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDefaultConfig", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDefaultConfig indicates an expected call of CreateDefaultConfig.
func (mr *MockConfigServiceMockRecorder) CreateDefaultConfig(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDefaultConfig", reflect.TypeOf((*MockConfigService)(nil).CreateDefaultConfig), ctx)
}

// DiscoverRepositories mocks base method.
func (m *MockConfigService) DiscoverRepositories(ctx context.Context) ([]*entities.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoverRepositories", ctx)
	ret0, _ := ret[0].([]*entities.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiscoverRepositories indicates an expected call of DiscoverRepositories.
func (mr *MockConfigServiceMockRecorder) DiscoverRepositories(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoverRepositories", reflect.TypeOf((*MockConfigService)(nil).DiscoverRepositories), ctx)
}

// GetAllGroups mocks base method.
func (m *MockConfigService) GetAllGroups(ctx context.Context) ([]*entities.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGroups", ctx)
	ret0, _ := ret[0].([]*entities.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllGroups indicates an expected call of GetAllGroups.
func (mr *MockConfigServiceMockRecorder) GetAllGroups(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGroups", reflect.TypeOf((*MockConfigService)(nil).GetAllGroups), ctx)
}

// GetAllRepositories mocks base method.
func (m *MockConfigService) GetAllRepositories(ctx context.Context) ([]*entities.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRepositories", ctx)
	ret0, _ := ret[0].([]*entities.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRepositories indicates an expected call of GetAllRepositories.
func (mr *MockConfigServiceMockRecorder) GetAllRepositories(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRepositories", reflect.TypeOf((*MockConfigService)(nil).GetAllRepositories), ctx)
}

// GetConfigPath mocks base method.
func (m *MockConfigService) GetConfigPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetConfigPath indicates an expected call of GetConfigPath.
func (mr *MockConfigServiceMockRecorder) GetConfigPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigPath", reflect.TypeOf((*MockConfigService)(nil).GetConfigPath))
}

// GetGroup mocks base method.
func (m *MockConfigService) GetGroup(ctx context.Context, name string) (*entities.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroup", ctx, name)
	ret0, _ := ret[0].(*entities.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroup indicates an expected call of GetGroup.
func (mr *MockConfigServiceMockRecorder) GetGroup(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup", reflect.TypeOf((*MockConfigService)(nil).GetGroup), ctx, name)
}

// GetRepositoriesForGroups mocks base method.
func (m *MockConfigService) GetRepositoriesForGroups(ctx context.Context, groupNames []string) ([]*entities.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoriesForGroups", ctx, groupNames)
	ret0, _ := ret[0].([]*entities.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositoriesForGroups indicates an expected call of GetRepositoriesForGroups.
func (mr *MockConfigServiceMockRecorder) GetRepositoriesForGroups(ctx, groupNames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoriesForGroups", reflect.TypeOf((*MockConfigService)(nil).GetRepositoriesForGroups), ctx, groupNames)
}

// GetRepository mocks base method.
func (m *MockConfigService) GetRepository(ctx context.Context, name string) (*entities.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository", ctx, name)
	ret0, _ := ret[0].(*entities.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepository indicates an expected call of GetRepository.
func (mr *MockConfigServiceMockRecorder) GetRepository(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockConfigService)(nil).GetRepository), ctx, name)
}

// GetTheme mocks base method.
func (m *MockConfigService) GetTheme(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTheme", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTheme indicates an expected call of GetTheme.
func (mr *MockConfigServiceMockRecorder) GetTheme(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTheme", reflect.TypeOf((*MockConfigService)(nil).GetTheme), ctx)
}

// LoadConfig mocks base method.
func (m *MockConfigService) LoadConfig(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadConfig", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadConfig indicates an expected call of LoadConfig.
func (mr *MockConfigServiceMockRecorder) LoadConfig(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfig", reflect.TypeOf((*MockConfigService)(nil).LoadConfig), ctx)
}

// RemoveGroup mocks base method.
func (m *MockConfigService) RemoveGroup(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveGroup", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveGroup indicates an expected call of RemoveGroup.
func (mr *MockConfigServiceMockRecorder) RemoveGroup(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveGroup", reflect.TypeOf((*MockConfigService)(nil).RemoveGroup), ctx, name)
}

// RemoveRepository mocks base method.
func (m *MockConfigService) RemoveRepository(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRepository", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRepository indicates an expected call of RemoveRepository.
func (mr *MockConfigServiceMockRecorder) RemoveRepository(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRepository", reflect.TypeOf((*MockConfigService)(nil).RemoveRepository), ctx, name)
}

// SaveConfig mocks base method.
func (m *MockConfigService) SaveConfig(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveConfig", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveConfig indicates an expected call of SaveConfig.
func (mr *MockConfigServiceMockRecorder) SaveConfig(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConfig", reflect.TypeOf((*MockConfigService)(nil).SaveConfig), ctx)
}

// SetTheme mocks base method.
func (m *MockConfigService) SetTheme(ctx context.Context, theme string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTheme", ctx, theme)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTheme indicates an expected call of SetTheme.
func (mr *MockConfigServiceMockRecorder) SetTheme(ctx, theme any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTheme", reflect.TypeOf((*MockConfigService)(nil).SetTheme), ctx, theme)
}

// ValidateConfig mocks base method.
func (m *MockConfigService) ValidateConfig(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateConfig", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateConfig indicates an expected call of ValidateConfig.
func (mr *MockConfigServiceMockRecorder) ValidateConfig(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateConfig", reflect.TypeOf((*MockConfigService)(nil).ValidateConfig), ctx)
}

// MockValidationService is a mock of ValidationService interface.
type MockValidationService struct {
	ctrl     *gomock.Controller
	recorder *MockValidationServiceMockRecorder
	isgomock struct{}
}

// MockValidationServiceMockRecorder is the mock recorder for MockValidationService.
type MockValidationServiceMockRecorder struct {
	mock *MockValidationService
}

// NewMockValidationService creates a new mock instance.
func NewMockValidationService(ctrl *gomock.Controller) *MockValidationService {
	mock := &MockValidationService{ctrl: ctrl}
	mock.recorder = &MockValidationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidationService) EXPECT() *MockValidationServiceMockRecorder {
	return m.recorder
}

// ValidateCommand mocks base method.
func (m *MockValidationService) ValidateCommand(ctx context.Context, cmd *entities.Command) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateCommand", ctx, cmd)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateCommand indicates an expected call of ValidateCommand.
func (mr *MockValidationServiceMockRecorder) ValidateCommand(ctx, cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCommand", reflect.TypeOf((*MockValidationService)(nil).ValidateCommand), ctx, cmd)
}

// ValidateConfig mocks base method.
func (m *MockValidationService) ValidateConfig(ctx context.Context, config any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateConfig", ctx, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateConfig indicates an expected call of ValidateConfig.
func (mr *MockValidationServiceMockRecorder) ValidateConfig(ctx, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateConfig", reflect.TypeOf((*MockValidationService)(nil).ValidateConfig), ctx, config)
}

// ValidateGroup mocks base method.
func (m *MockValidationService) ValidateGroup(ctx context.Context, group *entities.Group) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateGroup", ctx, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateGroup indicates an expected call of ValidateGroup.
func (mr *MockValidationServiceMockRecorder) ValidateGroup(ctx, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateGroup", reflect.TypeOf((*MockValidationService)(nil).ValidateGroup), ctx, group)
}

// ValidatePath mocks base method.
func (m *MockValidationService) ValidatePath(ctx context.Context, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatePath", ctx, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidatePath indicates an expected call of ValidatePath.
func (mr *MockValidationServiceMockRecorder) ValidatePath(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePath", reflect.TypeOf((*MockValidationService)(nil).ValidatePath), ctx, path)
}

// ValidateRepository mocks base method.
func (m *MockValidationService) ValidateRepository(ctx context.Context, repo *entities.Repository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRepository", ctx, repo)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateRepository indicates an expected call of ValidateRepository.
func (mr *MockValidationServiceMockRecorder) ValidateRepository(ctx, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRepository", reflect.TypeOf((*MockValidationService)(nil).ValidateRepository), ctx, repo)
}

// MockLoggingService is a mock of LoggingService interface.
type MockLoggingService struct {
	ctrl     *gomock.Controller
	recorder *MockLoggingServiceMockRecorder
	isgomock struct{}
}

// MockLoggingServiceMockRecorder is the mock recorder for MockLoggingService.
type MockLoggingServiceMockRecorder struct {
	mock *MockLoggingService
}

// NewMockLoggingService creates a new mock instance.
func NewMockLoggingService(ctrl *gomock.Controller) *MockLoggingService {
	mock := &MockLoggingService{ctrl: ctrl}
	mock.recorder = &MockLoggingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggingService) EXPECT() *MockLoggingServiceMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLoggingService) Debug(ctx context.Context, message string, fields ...any) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, message}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggingServiceMockRecorder) Debug(ctx, message any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, message}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLoggingService)(nil).Debug), varargs...)
}

// Error mocks base method.
func (m *MockLoggingService) Error(ctx context.Context, message string, err error, fields ...any) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, message, err}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggingServiceMockRecorder) Error(ctx, message, err any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, message, err}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLoggingService)(nil).Error), varargs...)
}

// Fatal mocks base method.
func (m *MockLoggingService) Fatal(ctx context.Context, message string, err error, fields ...any) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, message, err}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockLoggingServiceMockRecorder) Fatal(ctx, message, err any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, message, err}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockLoggingService)(nil).Fatal), varargs...)
}

// GetLevel mocks base method.
func (m *MockLoggingService) GetLevel() logger.Level {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevel")
	ret0, _ := ret[0].(logger.Level)
	return ret0
}

// GetLevel indicates an expected call of GetLevel.
func (mr *MockLoggingServiceMockRecorder) GetLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevel", reflect.TypeOf((*MockLoggingService)(nil).GetLevel))
}

// Info mocks base method.
func (m *MockLoggingService) Info(ctx context.Context, message string, fields ...any) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, message}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggingServiceMockRecorder) Info(ctx, message any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, message}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLoggingService)(nil).Info), varargs...)
}

// SetLevel mocks base method.
func (m *MockLoggingService) SetLevel(level logger.Level) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLevel", level)
}

// SetLevel indicates an expected call of SetLevel.
func (mr *MockLoggingServiceMockRecorder) SetLevel(level any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLevel", reflect.TypeOf((*MockLoggingService)(nil).SetLevel), level)
}

// Warn mocks base method.
func (m *MockLoggingService) Warn(ctx context.Context, message string, fields ...any) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, message}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggingServiceMockRecorder) Warn(ctx, message any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, message}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLoggingService)(nil).Warn), varargs...)
}
