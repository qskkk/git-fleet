// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qskkk/git-fleet/v2/internal/domain/repositories (interfaces: ConfigRepository)
//
// Generated by this command:
//
//	mockgen -package=repositories -destination=config_mocks.go github.com/qskkk/git-fleet/v2/internal/domain/repositories ConfigRepository
//

// Package repositories is a generated GoMock package.
package repositories

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockConfigRepository is a mock of ConfigRepository interface.
type MockConfigRepository struct {
	ctrl     *gomock.Controller
	recorder *MockConfigRepositoryMockRecorder
	isgomock struct{}
}

// MockConfigRepositoryMockRecorder is the mock recorder for MockConfigRepository.
type MockConfigRepositoryMockRecorder struct {
	mock *MockConfigRepository
}

// NewMockConfigRepository creates a new mock instance.
func NewMockConfigRepository(ctrl *gomock.Controller) *MockConfigRepository {
	mock := &MockConfigRepository{ctrl: ctrl}
	mock.recorder = &MockConfigRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigRepository) EXPECT() *MockConfigRepositoryMockRecorder {
	return m.recorder
}

// CreateDefault mocks base method.
func (m *MockConfigRepository) CreateDefault(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDefault", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDefault indicates an expected call of CreateDefault.
func (mr *MockConfigRepositoryMockRecorder) CreateDefault(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDefault", reflect.TypeOf((*MockConfigRepository)(nil).CreateDefault), ctx)
}

// Exists mocks base method.
func (m *MockConfigRepository) Exists(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockConfigRepositoryMockRecorder) Exists(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockConfigRepository)(nil).Exists), ctx)
}

// GetPath mocks base method.
func (m *MockConfigRepository) GetPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPath indicates an expected call of GetPath.
func (mr *MockConfigRepositoryMockRecorder) GetPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPath", reflect.TypeOf((*MockConfigRepository)(nil).GetPath))
}

// Load mocks base method.
func (m *MockConfigRepository) Load(ctx context.Context) (*Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", ctx)
	ret0, _ := ret[0].(*Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockConfigRepositoryMockRecorder) Load(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockConfigRepository)(nil).Load), ctx)
}

// Save mocks base method.
func (m *MockConfigRepository) Save(ctx context.Context, config *Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockConfigRepositoryMockRecorder) Save(ctx, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockConfigRepository)(nil).Save), ctx, config)
}

// Validate mocks base method.
func (m *MockConfigRepository) Validate(ctx context.Context, config *Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", ctx, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockConfigRepositoryMockRecorder) Validate(ctx, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockConfigRepository)(nil).Validate), ctx, config)
}
