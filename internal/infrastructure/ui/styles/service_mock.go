// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qskkk/git-fleet/internal/infrastructure/ui/styles (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -package=styles -destination=service_mock.go github.com/qskkk/git-fleet/internal/infrastructure/ui/styles Service
//

// Package styles is a generated GoMock package.
package styles

import (
	reflect "reflect"

	lipgloss "github.com/charmbracelet/lipgloss"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CalculateColumnWidths mocks base method.
func (m *MockService) CalculateColumnWidths(headers []string, data [][]string, terminalWidth int) []int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateColumnWidths", headers, data, terminalWidth)
	ret0, _ := ret[0].([]int)
	return ret0
}

// CalculateColumnWidths indicates an expected call of CalculateColumnWidths.
func (mr *MockServiceMockRecorder) CalculateColumnWidths(headers, data, terminalWidth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateColumnWidths", reflect.TypeOf((*MockService)(nil).CalculateColumnWidths), headers, data, terminalWidth)
}

// CreateResponsiveTable mocks base method.
func (m *MockService) CreateResponsiveTable(headers []string, data [][]string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResponsiveTable", headers, data)
	ret0, _ := ret[0].(string)
	return ret0
}

// CreateResponsiveTable indicates an expected call of CreateResponsiveTable.
func (mr *MockServiceMockRecorder) CreateResponsiveTable(headers, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResponsiveTable", reflect.TypeOf((*MockService)(nil).CreateResponsiveTable), headers, data)
}

// GetBorderColor mocks base method.
func (m *MockService) GetBorderColor() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBorderColor")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBorderColor indicates an expected call of GetBorderColor.
func (mr *MockServiceMockRecorder) GetBorderColor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBorderColor", reflect.TypeOf((*MockService)(nil).GetBorderColor))
}

// GetDimStatusColors mocks base method.
func (m *MockService) GetDimStatusColors() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDimStatusColors")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetDimStatusColors indicates an expected call of GetDimStatusColors.
func (mr *MockServiceMockRecorder) GetDimStatusColors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDimStatusColors", reflect.TypeOf((*MockService)(nil).GetDimStatusColors))
}

// GetErrorStyle mocks base method.
func (m *MockService) GetErrorStyle() lipgloss.Style {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorStyle")
	ret0, _ := ret[0].(lipgloss.Style)
	return ret0
}

// GetErrorStyle indicates an expected call of GetErrorStyle.
func (mr *MockServiceMockRecorder) GetErrorStyle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorStyle", reflect.TypeOf((*MockService)(nil).GetErrorStyle))
}

// GetHighlightBgColor mocks base method.
func (m *MockService) GetHighlightBgColor() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHighlightBgColor")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHighlightBgColor indicates an expected call of GetHighlightBgColor.
func (mr *MockServiceMockRecorder) GetHighlightBgColor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHighlightBgColor", reflect.TypeOf((*MockService)(nil).GetHighlightBgColor))
}

// GetHighlightColor mocks base method.
func (m *MockService) GetHighlightColor() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHighlightColor")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHighlightColor indicates an expected call of GetHighlightColor.
func (mr *MockServiceMockRecorder) GetHighlightColor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHighlightColor", reflect.TypeOf((*MockService)(nil).GetHighlightColor))
}

// GetHighlightStyle mocks base method.
func (m *MockService) GetHighlightStyle() lipgloss.Style {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHighlightStyle")
	ret0, _ := ret[0].(lipgloss.Style)
	return ret0
}

// GetHighlightStyle indicates an expected call of GetHighlightStyle.
func (mr *MockServiceMockRecorder) GetHighlightStyle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHighlightStyle", reflect.TypeOf((*MockService)(nil).GetHighlightStyle))
}

// GetLabelStyle mocks base method.
func (m *MockService) GetLabelStyle() lipgloss.Style {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabelStyle")
	ret0, _ := ret[0].(lipgloss.Style)
	return ret0
}

// GetLabelStyle indicates an expected call of GetLabelStyle.
func (mr *MockServiceMockRecorder) GetLabelStyle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabelStyle", reflect.TypeOf((*MockService)(nil).GetLabelStyle))
}

// GetLightTextColor mocks base method.
func (m *MockService) GetLightTextColor() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLightTextColor")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLightTextColor indicates an expected call of GetLightTextColor.
func (mr *MockServiceMockRecorder) GetLightTextColor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLightTextColor", reflect.TypeOf((*MockService)(nil).GetLightTextColor))
}

// GetPathStyle mocks base method.
func (m *MockService) GetPathStyle() lipgloss.Style {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPathStyle")
	ret0, _ := ret[0].(lipgloss.Style)
	return ret0
}

// GetPathStyle indicates an expected call of GetPathStyle.
func (mr *MockServiceMockRecorder) GetPathStyle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPathStyle", reflect.TypeOf((*MockService)(nil).GetPathStyle))
}

// GetPrimaryColor mocks base method.
func (m *MockService) GetPrimaryColor() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrimaryColor")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPrimaryColor indicates an expected call of GetPrimaryColor.
func (mr *MockServiceMockRecorder) GetPrimaryColor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrimaryColor", reflect.TypeOf((*MockService)(nil).GetPrimaryColor))
}

// GetSecondaryColor mocks base method.
func (m *MockService) GetSecondaryColor() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecondaryColor")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSecondaryColor indicates an expected call of GetSecondaryColor.
func (mr *MockServiceMockRecorder) GetSecondaryColor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecondaryColor", reflect.TypeOf((*MockService)(nil).GetSecondaryColor))
}

// GetSectionStyle mocks base method.
func (m *MockService) GetSectionStyle() lipgloss.Style {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSectionStyle")
	ret0, _ := ret[0].(lipgloss.Style)
	return ret0
}

// GetSectionStyle indicates an expected call of GetSectionStyle.
func (mr *MockServiceMockRecorder) GetSectionStyle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSectionStyle", reflect.TypeOf((*MockService)(nil).GetSectionStyle))
}

// GetStatusColors mocks base method.
func (m *MockService) GetStatusColors() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatusColors")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetStatusColors indicates an expected call of GetStatusColors.
func (mr *MockServiceMockRecorder) GetStatusColors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatusColors", reflect.TypeOf((*MockService)(nil).GetStatusColors))
}

// GetSuccessStyle mocks base method.
func (m *MockService) GetSuccessStyle() lipgloss.Style {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuccessStyle")
	ret0, _ := ret[0].(lipgloss.Style)
	return ret0
}

// GetSuccessStyle indicates an expected call of GetSuccessStyle.
func (mr *MockServiceMockRecorder) GetSuccessStyle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuccessStyle", reflect.TypeOf((*MockService)(nil).GetSuccessStyle))
}

// GetTableStyle mocks base method.
func (m *MockService) GetTableStyle() lipgloss.Style {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableStyle")
	ret0, _ := ret[0].(lipgloss.Style)
	return ret0
}

// GetTableStyle indicates an expected call of GetTableStyle.
func (mr *MockServiceMockRecorder) GetTableStyle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableStyle", reflect.TypeOf((*MockService)(nil).GetTableStyle))
}

// GetTerminalWidth mocks base method.
func (m *MockService) GetTerminalWidth() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTerminalWidth")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetTerminalWidth indicates an expected call of GetTerminalWidth.
func (mr *MockServiceMockRecorder) GetTerminalWidth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTerminalWidth", reflect.TypeOf((*MockService)(nil).GetTerminalWidth))
}

// GetTextColor mocks base method.
func (m *MockService) GetTextColor() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTextColor")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTextColor indicates an expected call of GetTextColor.
func (mr *MockServiceMockRecorder) GetTextColor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTextColor", reflect.TypeOf((*MockService)(nil).GetTextColor))
}

// GetTheme mocks base method.
func (m *MockService) GetTheme() Theme {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTheme")
	ret0, _ := ret[0].(Theme)
	return ret0
}

// GetTheme indicates an expected call of GetTheme.
func (mr *MockServiceMockRecorder) GetTheme() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTheme", reflect.TypeOf((*MockService)(nil).GetTheme))
}

// GetTitleStyle mocks base method.
func (m *MockService) GetTitleStyle() lipgloss.Style {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTitleStyle")
	ret0, _ := ret[0].(lipgloss.Style)
	return ret0
}

// GetTitleStyle indicates an expected call of GetTitleStyle.
func (mr *MockServiceMockRecorder) GetTitleStyle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTitleStyle", reflect.TypeOf((*MockService)(nil).GetTitleStyle))
}

// IsCurrentRepository mocks base method.
func (m *MockService) IsCurrentRepository(repoPath string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCurrentRepository", repoPath)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsCurrentRepository indicates an expected call of IsCurrentRepository.
func (mr *MockServiceMockRecorder) IsCurrentRepository(repoPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCurrentRepository", reflect.TypeOf((*MockService)(nil).IsCurrentRepository), repoPath)
}

// SetTheme mocks base method.
func (m *MockService) SetTheme(theme Theme) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTheme", theme)
}

// SetTheme indicates an expected call of SetTheme.
func (mr *MockServiceMockRecorder) SetTheme(theme any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTheme", reflect.TypeOf((*MockService)(nil).SetTheme), theme)
}

// TruncateString mocks base method.
func (m *MockService) TruncateString(str string, maxWidth int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TruncateString", str, maxWidth)
	ret0, _ := ret[0].(string)
	return ret0
}

// TruncateString indicates an expected call of TruncateString.
func (mr *MockServiceMockRecorder) TruncateString(str, maxWidth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TruncateString", reflect.TypeOf((*MockService)(nil).TruncateString), str, maxWidth)
}
