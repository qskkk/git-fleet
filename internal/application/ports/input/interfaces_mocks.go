// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qskkk/git-fleet/v2/internal/application/ports/input (interfaces: CLIPort,InteractivePort,ConfigManager)
//
// Generated by this command:
//
//	mockgen -package=input -destination=interfaces_mocks.go github.com/qskkk/git-fleet/v2/internal/application/ports/input CLIPort,InteractivePort,ConfigManager
//

// Package input is a generated GoMock package.
package input

import (
	context "context"
	reflect "reflect"

	entities "github.com/qskkk/git-fleet/v2/internal/domain/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockCLIPort is a mock of CLIPort interface.
type MockCLIPort struct {
	ctrl     *gomock.Controller
	recorder *MockCLIPortMockRecorder
	isgomock struct{}
}

// MockCLIPortMockRecorder is the mock recorder for MockCLIPort.
type MockCLIPortMockRecorder struct {
	mock *MockCLIPort
}

// NewMockCLIPort creates a new mock instance.
func NewMockCLIPort(ctrl *gomock.Controller) *MockCLIPort {
	mock := &MockCLIPort{ctrl: ctrl}
	mock.recorder = &MockCLIPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCLIPort) EXPECT() *MockCLIPortMockRecorder {
	return m.recorder
}

// GetHelpText mocks base method.
func (m *MockCLIPort) GetHelpText() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHelpText")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHelpText indicates an expected call of GetHelpText.
func (mr *MockCLIPortMockRecorder) GetHelpText() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHelpText", reflect.TypeOf((*MockCLIPort)(nil).GetHelpText))
}

// GetVersionText mocks base method.
func (m *MockCLIPort) GetVersionText() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersionText")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetVersionText indicates an expected call of GetVersionText.
func (mr *MockCLIPortMockRecorder) GetVersionText() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersionText", reflect.TypeOf((*MockCLIPort)(nil).GetVersionText))
}

// ParseArgs mocks base method.
func (m *MockCLIPort) ParseArgs(args []string) (*CLIInput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseArgs", args)
	ret0, _ := ret[0].(*CLIInput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseArgs indicates an expected call of ParseArgs.
func (mr *MockCLIPortMockRecorder) ParseArgs(args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseArgs", reflect.TypeOf((*MockCLIPort)(nil).ParseArgs), args)
}

// ValidateInput mocks base method.
func (m *MockCLIPort) ValidateInput(input *CLIInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateInput", input)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateInput indicates an expected call of ValidateInput.
func (mr *MockCLIPortMockRecorder) ValidateInput(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateInput", reflect.TypeOf((*MockCLIPort)(nil).ValidateInput), input)
}

// MockInteractivePort is a mock of InteractivePort interface.
type MockInteractivePort struct {
	ctrl     *gomock.Controller
	recorder *MockInteractivePortMockRecorder
	isgomock struct{}
}

// MockInteractivePortMockRecorder is the mock recorder for MockInteractivePort.
type MockInteractivePortMockRecorder struct {
	mock *MockInteractivePort
}

// NewMockInteractivePort creates a new mock instance.
func NewMockInteractivePort(ctrl *gomock.Controller) *MockInteractivePort {
	mock := &MockInteractivePort{ctrl: ctrl}
	mock.recorder = &MockInteractivePortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInteractivePort) EXPECT() *MockInteractivePortMockRecorder {
	return m.recorder
}

// SelectCommand mocks base method.
func (m *MockInteractivePort) SelectCommand(ctx context.Context, commands []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectCommand", ctx, commands)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectCommand indicates an expected call of SelectCommand.
func (mr *MockInteractivePortMockRecorder) SelectCommand(ctx, commands any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectCommand", reflect.TypeOf((*MockInteractivePort)(nil).SelectCommand), ctx, commands)
}

// SelectGroups mocks base method.
func (m *MockInteractivePort) SelectGroups(ctx context.Context, groups []*entities.Group) ([]*entities.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectGroups", ctx, groups)
	ret0, _ := ret[0].([]*entities.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectGroups indicates an expected call of SelectGroups.
func (mr *MockInteractivePortMockRecorder) SelectGroups(ctx, groups any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectGroups", reflect.TypeOf((*MockInteractivePort)(nil).SelectGroups), ctx, groups)
}

// ShowProgress mocks base method.
func (m *MockInteractivePort) ShowProgress(ctx context.Context, progress *ProgressInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowProgress", ctx, progress)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShowProgress indicates an expected call of ShowProgress.
func (mr *MockInteractivePortMockRecorder) ShowProgress(ctx, progress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowProgress", reflect.TypeOf((*MockInteractivePort)(nil).ShowProgress), ctx, progress)
}

// ShowResults mocks base method.
func (m *MockInteractivePort) ShowResults(ctx context.Context, summary *entities.Summary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowResults", ctx, summary)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShowResults indicates an expected call of ShowResults.
func (mr *MockInteractivePortMockRecorder) ShowResults(ctx, summary any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowResults", reflect.TypeOf((*MockInteractivePort)(nil).ShowResults), ctx, summary)
}

// Start mocks base method.
func (m *MockInteractivePort) Start(ctx context.Context) (*InteractiveResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(*InteractiveResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockInteractivePortMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockInteractivePort)(nil).Start), ctx)
}

// MockConfigManager is a mock of ConfigManager interface.
type MockConfigManager struct {
	ctrl     *gomock.Controller
	recorder *MockConfigManagerMockRecorder
	isgomock struct{}
}

// MockConfigManagerMockRecorder is the mock recorder for MockConfigManager.
type MockConfigManagerMockRecorder struct {
	mock *MockConfigManager
}

// NewMockConfigManager creates a new mock instance.
func NewMockConfigManager(ctrl *gomock.Controller) *MockConfigManager {
	mock := &MockConfigManager{ctrl: ctrl}
	mock.recorder = &MockConfigManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigManager) EXPECT() *MockConfigManagerMockRecorder {
	return m.recorder
}

// AddGroup mocks base method.
func (m *MockConfigManager) AddGroup(ctx context.Context, input *AddGroupInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGroup", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddGroup indicates an expected call of AddGroup.
func (mr *MockConfigManagerMockRecorder) AddGroup(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGroup", reflect.TypeOf((*MockConfigManager)(nil).AddGroup), ctx, input)
}

// AddRepository mocks base method.
func (m *MockConfigManager) AddRepository(ctx context.Context, input *AddRepositoryInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRepository", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRepository indicates an expected call of AddRepository.
func (mr *MockConfigManagerMockRecorder) AddRepository(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRepository", reflect.TypeOf((*MockConfigManager)(nil).AddRepository), ctx, input)
}

// CreateDefaultConfig mocks base method.
func (m *MockConfigManager) CreateDefaultConfig(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDefaultConfig", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDefaultConfig indicates an expected call of CreateDefaultConfig.
func (mr *MockConfigManagerMockRecorder) CreateDefaultConfig(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDefaultConfig", reflect.TypeOf((*MockConfigManager)(nil).CreateDefaultConfig), ctx)
}

// RemoveGroup mocks base method.
func (m *MockConfigManager) RemoveGroup(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveGroup", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveGroup indicates an expected call of RemoveGroup.
func (mr *MockConfigManagerMockRecorder) RemoveGroup(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveGroup", reflect.TypeOf((*MockConfigManager)(nil).RemoveGroup), ctx, name)
}

// RemoveRepository mocks base method.
func (m *MockConfigManager) RemoveRepository(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRepository", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRepository indicates an expected call of RemoveRepository.
func (mr *MockConfigManagerMockRecorder) RemoveRepository(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRepository", reflect.TypeOf((*MockConfigManager)(nil).RemoveRepository), ctx, name)
}

// SetTheme mocks base method.
func (m *MockConfigManager) SetTheme(ctx context.Context, theme string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTheme", ctx, theme)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTheme indicates an expected call of SetTheme.
func (mr *MockConfigManagerMockRecorder) SetTheme(ctx, theme any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTheme", reflect.TypeOf((*MockConfigManager)(nil).SetTheme), ctx, theme)
}

// ShowConfig mocks base method.
func (m *MockConfigManager) ShowConfig(ctx context.Context, input *ShowConfigInput) (*ShowConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowConfig", ctx, input)
	ret0, _ := ret[0].(*ShowConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowConfig indicates an expected call of ShowConfig.
func (mr *MockConfigManagerMockRecorder) ShowConfig(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowConfig", reflect.TypeOf((*MockConfigManager)(nil).ShowConfig), ctx, input)
}

// ValidateConfig mocks base method.
func (m *MockConfigManager) ValidateConfig(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateConfig", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateConfig indicates an expected call of ValidateConfig.
func (mr *MockConfigManagerMockRecorder) ValidateConfig(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateConfig", reflect.TypeOf((*MockConfigManager)(nil).ValidateConfig), ctx)
}
