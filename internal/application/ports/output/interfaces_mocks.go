// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qskkk/git-fleet/v2/internal/application/ports/output (interfaces: PresenterPort,FormatterPort,WriterPort)
//
// Generated by this command:
//
//	mockgen -package=output -destination=interfaces_mocks.go github.com/qskkk/git-fleet/v2/internal/application/ports/output PresenterPort,FormatterPort,WriterPort
//

// Package output is a generated GoMock package.
package output

import (
	context "context"
	reflect "reflect"

	entities "github.com/qskkk/git-fleet/v2/internal/domain/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockPresenterPort is a mock of PresenterPort interface.
type MockPresenterPort struct {
	ctrl     *gomock.Controller
	recorder *MockPresenterPortMockRecorder
	isgomock struct{}
}

// MockPresenterPortMockRecorder is the mock recorder for MockPresenterPort.
type MockPresenterPortMockRecorder struct {
	mock *MockPresenterPort
}

// NewMockPresenterPort creates a new mock instance.
func NewMockPresenterPort(ctrl *gomock.Controller) *MockPresenterPort {
	mock := &MockPresenterPort{ctrl: ctrl}
	mock.recorder = &MockPresenterPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPresenterPort) EXPECT() *MockPresenterPortMockRecorder {
	return m.recorder
}

// PresentConfig mocks base method.
func (m *MockPresenterPort) PresentConfig(ctx context.Context, config any) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PresentConfig", ctx, config)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PresentConfig indicates an expected call of PresentConfig.
func (mr *MockPresenterPortMockRecorder) PresentConfig(ctx, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresentConfig", reflect.TypeOf((*MockPresenterPort)(nil).PresentConfig), ctx, config)
}

// PresentError mocks base method.
func (m *MockPresenterPort) PresentError(ctx context.Context, err error) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PresentError", ctx, err)
	ret0, _ := ret[0].(string)
	return ret0
}

// PresentError indicates an expected call of PresentError.
func (mr *MockPresenterPortMockRecorder) PresentError(ctx, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresentError", reflect.TypeOf((*MockPresenterPort)(nil).PresentError), ctx, err)
}

// PresentHelp mocks base method.
func (m *MockPresenterPort) PresentHelp(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PresentHelp", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// PresentHelp indicates an expected call of PresentHelp.
func (mr *MockPresenterPortMockRecorder) PresentHelp(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresentHelp", reflect.TypeOf((*MockPresenterPort)(nil).PresentHelp), ctx)
}

// PresentStatus mocks base method.
func (m *MockPresenterPort) PresentStatus(ctx context.Context, repos []*entities.Repository, groupFilter string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PresentStatus", ctx, repos, groupFilter)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PresentStatus indicates an expected call of PresentStatus.
func (mr *MockPresenterPortMockRecorder) PresentStatus(ctx, repos, groupFilter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresentStatus", reflect.TypeOf((*MockPresenterPort)(nil).PresentStatus), ctx, repos, groupFilter)
}

// PresentSummary mocks base method.
func (m *MockPresenterPort) PresentSummary(ctx context.Context, summary *entities.Summary) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PresentSummary", ctx, summary)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PresentSummary indicates an expected call of PresentSummary.
func (mr *MockPresenterPortMockRecorder) PresentSummary(ctx, summary any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresentSummary", reflect.TypeOf((*MockPresenterPort)(nil).PresentSummary), ctx, summary)
}

// PresentVersion mocks base method.
func (m *MockPresenterPort) PresentVersion(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PresentVersion", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// PresentVersion indicates an expected call of PresentVersion.
func (mr *MockPresenterPortMockRecorder) PresentVersion(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresentVersion", reflect.TypeOf((*MockPresenterPort)(nil).PresentVersion), ctx)
}

// MockFormatterPort is a mock of FormatterPort interface.
type MockFormatterPort struct {
	ctrl     *gomock.Controller
	recorder *MockFormatterPortMockRecorder
	isgomock struct{}
}

// MockFormatterPortMockRecorder is the mock recorder for MockFormatterPort.
type MockFormatterPortMockRecorder struct {
	mock *MockFormatterPort
}

// NewMockFormatterPort creates a new mock instance.
func NewMockFormatterPort(ctrl *gomock.Controller) *MockFormatterPort {
	mock := &MockFormatterPort{ctrl: ctrl}
	mock.recorder = &MockFormatterPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFormatterPort) EXPECT() *MockFormatterPortMockRecorder {
	return m.recorder
}

// FormatError mocks base method.
func (m *MockFormatterPort) FormatError(err error) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatError", err)
	ret0, _ := ret[0].(string)
	return ret0
}

// FormatError indicates an expected call of FormatError.
func (mr *MockFormatterPortMockRecorder) FormatError(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatError", reflect.TypeOf((*MockFormatterPort)(nil).FormatError), err)
}

// FormatInfo mocks base method.
func (m *MockFormatterPort) FormatInfo(message string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatInfo", message)
	ret0, _ := ret[0].(string)
	return ret0
}

// FormatInfo indicates an expected call of FormatInfo.
func (mr *MockFormatterPortMockRecorder) FormatInfo(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatInfo", reflect.TypeOf((*MockFormatterPort)(nil).FormatInfo), message)
}

// FormatList mocks base method.
func (m *MockFormatterPort) FormatList(items []string, options *ListOptions) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatList", items, options)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormatList indicates an expected call of FormatList.
func (mr *MockFormatterPortMockRecorder) FormatList(items, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatList", reflect.TypeOf((*MockFormatterPort)(nil).FormatList), items, options)
}

// FormatProgress mocks base method.
func (m *MockFormatterPort) FormatProgress(progress *ProgressInfo) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatProgress", progress)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormatProgress indicates an expected call of FormatProgress.
func (mr *MockFormatterPortMockRecorder) FormatProgress(progress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatProgress", reflect.TypeOf((*MockFormatterPort)(nil).FormatProgress), progress)
}

// FormatSuccess mocks base method.
func (m *MockFormatterPort) FormatSuccess(message string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatSuccess", message)
	ret0, _ := ret[0].(string)
	return ret0
}

// FormatSuccess indicates an expected call of FormatSuccess.
func (mr *MockFormatterPortMockRecorder) FormatSuccess(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatSuccess", reflect.TypeOf((*MockFormatterPort)(nil).FormatSuccess), message)
}

// FormatSummary mocks base method.
func (m *MockFormatterPort) FormatSummary(summary *entities.Summary) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatSummary", summary)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormatSummary indicates an expected call of FormatSummary.
func (mr *MockFormatterPortMockRecorder) FormatSummary(summary any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatSummary", reflect.TypeOf((*MockFormatterPort)(nil).FormatSummary), summary)
}

// FormatTable mocks base method.
func (m *MockFormatterPort) FormatTable(headers []string, data [][]string, options *TableOptions) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatTable", headers, data, options)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormatTable indicates an expected call of FormatTable.
func (mr *MockFormatterPortMockRecorder) FormatTable(headers, data, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatTable", reflect.TypeOf((*MockFormatterPort)(nil).FormatTable), headers, data, options)
}

// FormatWarning mocks base method.
func (m *MockFormatterPort) FormatWarning(message string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatWarning", message)
	ret0, _ := ret[0].(string)
	return ret0
}

// FormatWarning indicates an expected call of FormatWarning.
func (mr *MockFormatterPortMockRecorder) FormatWarning(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatWarning", reflect.TypeOf((*MockFormatterPort)(nil).FormatWarning), message)
}

// MockWriterPort is a mock of WriterPort interface.
type MockWriterPort struct {
	ctrl     *gomock.Controller
	recorder *MockWriterPortMockRecorder
	isgomock struct{}
}

// MockWriterPortMockRecorder is the mock recorder for MockWriterPort.
type MockWriterPortMockRecorder struct {
	mock *MockWriterPort
}

// NewMockWriterPort creates a new mock instance.
func NewMockWriterPort(ctrl *gomock.Controller) *MockWriterPort {
	mock := &MockWriterPort{ctrl: ctrl}
	mock.recorder = &MockWriterPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriterPort) EXPECT() *MockWriterPortMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockWriterPort) Clear(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockWriterPortMockRecorder) Clear(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockWriterPort)(nil).Clear), ctx)
}

// IsVerbose mocks base method.
func (m *MockWriterPort) IsVerbose() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsVerbose")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsVerbose indicates an expected call of IsVerbose.
func (mr *MockWriterPortMockRecorder) IsVerbose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsVerbose", reflect.TypeOf((*MockWriterPort)(nil).IsVerbose))
}

// SetVerbose mocks base method.
func (m *MockWriterPort) SetVerbose(verbose bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetVerbose", verbose)
}

// SetVerbose indicates an expected call of SetVerbose.
func (mr *MockWriterPortMockRecorder) SetVerbose(verbose any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVerbose", reflect.TypeOf((*MockWriterPort)(nil).SetVerbose), verbose)
}

// Write mocks base method.
func (m *MockWriterPort) Write(ctx context.Context, content string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", ctx, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockWriterPortMockRecorder) Write(ctx, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockWriterPort)(nil).Write), ctx, content)
}

// WriteError mocks base method.
func (m *MockWriterPort) WriteError(ctx context.Context, err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteError", ctx, err)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteError indicates an expected call of WriteError.
func (mr *MockWriterPortMockRecorder) WriteError(ctx, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteError", reflect.TypeOf((*MockWriterPort)(nil).WriteError), ctx, err)
}

// WriteLine mocks base method.
func (m *MockWriterPort) WriteLine(ctx context.Context, line string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteLine", ctx, line)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteLine indicates an expected call of WriteLine.
func (mr *MockWriterPortMockRecorder) WriteLine(ctx, line any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLine", reflect.TypeOf((*MockWriterPort)(nil).WriteLine), ctx, line)
}
