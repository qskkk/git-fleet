// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qskkk/git-fleet/internal/application/usecases (interfaces: ManageConfigUCI)
//
// Generated by this command:
//
//	mockgen -package=usecases -destination=manage_config_mocks.go github.com/qskkk/git-fleet/internal/application/usecases ManageConfigUCI
//

// Package usecases is a generated GoMock package.
package usecases

import (
	context "context"
	reflect "reflect"

	entities "github.com/qskkk/git-fleet/internal/domain/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockManageConfigUCI is a mock of ManageConfigUCI interface.
type MockManageConfigUCI struct {
	ctrl     *gomock.Controller
	recorder *MockManageConfigUCIMockRecorder
	isgomock struct{}
}

// MockManageConfigUCIMockRecorder is the mock recorder for MockManageConfigUCI.
type MockManageConfigUCIMockRecorder struct {
	mock *MockManageConfigUCI
}

// NewMockManageConfigUCI creates a new mock instance.
func NewMockManageConfigUCI(ctrl *gomock.Controller) *MockManageConfigUCI {
	mock := &MockManageConfigUCI{ctrl: ctrl}
	mock.recorder = &MockManageConfigUCIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManageConfigUCI) EXPECT() *MockManageConfigUCIMockRecorder {
	return m.recorder
}

// AddGroup mocks base method.
func (m *MockManageConfigUCI) AddGroup(ctx context.Context, input *AddGroupInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGroup", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddGroup indicates an expected call of AddGroup.
func (mr *MockManageConfigUCIMockRecorder) AddGroup(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGroup", reflect.TypeOf((*MockManageConfigUCI)(nil).AddGroup), ctx, input)
}

// AddRepository mocks base method.
func (m *MockManageConfigUCI) AddRepository(ctx context.Context, input *AddRepositoryInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRepository", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRepository indicates an expected call of AddRepository.
func (mr *MockManageConfigUCIMockRecorder) AddRepository(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRepository", reflect.TypeOf((*MockManageConfigUCI)(nil).AddRepository), ctx, input)
}

// CreateDefaultConfig mocks base method.
func (m *MockManageConfigUCI) CreateDefaultConfig(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDefaultConfig", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDefaultConfig indicates an expected call of CreateDefaultConfig.
func (mr *MockManageConfigUCIMockRecorder) CreateDefaultConfig(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDefaultConfig", reflect.TypeOf((*MockManageConfigUCI)(nil).CreateDefaultConfig), ctx)
}

// DiscoverRepositories mocks base method.
func (m *MockManageConfigUCI) DiscoverRepositories(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoverRepositories", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DiscoverRepositories indicates an expected call of DiscoverRepositories.
func (mr *MockManageConfigUCIMockRecorder) DiscoverRepositories(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoverRepositories", reflect.TypeOf((*MockManageConfigUCI)(nil).DiscoverRepositories), ctx)
}

// GetGroups mocks base method.
func (m *MockManageConfigUCI) GetGroups(ctx context.Context) ([]*entities.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroups", ctx)
	ret0, _ := ret[0].([]*entities.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroups indicates an expected call of GetGroups.
func (mr *MockManageConfigUCIMockRecorder) GetGroups(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*MockManageConfigUCI)(nil).GetGroups), ctx)
}

// GetRepositories mocks base method.
func (m *MockManageConfigUCI) GetRepositories(ctx context.Context) ([]*entities.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositories", ctx)
	ret0, _ := ret[0].([]*entities.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositories indicates an expected call of GetRepositories.
func (mr *MockManageConfigUCIMockRecorder) GetRepositories(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositories", reflect.TypeOf((*MockManageConfigUCI)(nil).GetRepositories), ctx)
}

// RemoveGroup mocks base method.
func (m *MockManageConfigUCI) RemoveGroup(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveGroup", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveGroup indicates an expected call of RemoveGroup.
func (mr *MockManageConfigUCIMockRecorder) RemoveGroup(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveGroup", reflect.TypeOf((*MockManageConfigUCI)(nil).RemoveGroup), ctx, name)
}

// RemoveRepository mocks base method.
func (m *MockManageConfigUCI) RemoveRepository(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRepository", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRepository indicates an expected call of RemoveRepository.
func (mr *MockManageConfigUCIMockRecorder) RemoveRepository(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRepository", reflect.TypeOf((*MockManageConfigUCI)(nil).RemoveRepository), ctx, name)
}

// SetTheme mocks base method.
func (m *MockManageConfigUCI) SetTheme(ctx context.Context, theme string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTheme", ctx, theme)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTheme indicates an expected call of SetTheme.
func (mr *MockManageConfigUCIMockRecorder) SetTheme(ctx, theme any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTheme", reflect.TypeOf((*MockManageConfigUCI)(nil).SetTheme), ctx, theme)
}

// ShowConfig mocks base method.
func (m *MockManageConfigUCI) ShowConfig(ctx context.Context, input *ShowConfigInput) (*ShowConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowConfig", ctx, input)
	ret0, _ := ret[0].(*ShowConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowConfig indicates an expected call of ShowConfig.
func (mr *MockManageConfigUCIMockRecorder) ShowConfig(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowConfig", reflect.TypeOf((*MockManageConfigUCI)(nil).ShowConfig), ctx, input)
}

// ValidateConfig mocks base method.
func (m *MockManageConfigUCI) ValidateConfig(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateConfig", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateConfig indicates an expected call of ValidateConfig.
func (mr *MockManageConfigUCIMockRecorder) ValidateConfig(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateConfig", reflect.TypeOf((*MockManageConfigUCI)(nil).ValidateConfig), ctx)
}
