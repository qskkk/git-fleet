// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qskkk/git-fleet/v2/internal/pkg/logger (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -package=logger -destination=logger_mocks.go github.com/qskkk/git-fleet/v2/internal/pkg/logger Service
//

// Package logger is a generated GoMock package.
package logger

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockService) Debug(ctx context.Context, msg string, fields ...any) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockServiceMockRecorder) Debug(ctx, msg any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockService)(nil).Debug), varargs...)
}

// Error mocks base method.
func (m *MockService) Error(ctx context.Context, msg string, err error, fields ...any) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, msg, err}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockServiceMockRecorder) Error(ctx, msg, err any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, msg, err}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockService)(nil).Error), varargs...)
}

// Fatal mocks base method.
func (m *MockService) Fatal(ctx context.Context, msg string, err error, fields ...any) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, msg, err}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockServiceMockRecorder) Fatal(ctx, msg, err any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, msg, err}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockService)(nil).Fatal), varargs...)
}

// GetLevel mocks base method.
func (m *MockService) GetLevel() Level {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevel")
	ret0, _ := ret[0].(Level)
	return ret0
}

// GetLevel indicates an expected call of GetLevel.
func (mr *MockServiceMockRecorder) GetLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevel", reflect.TypeOf((*MockService)(nil).GetLevel))
}

// Info mocks base method.
func (m *MockService) Info(ctx context.Context, msg string, fields ...any) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockServiceMockRecorder) Info(ctx, msg any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockService)(nil).Info), varargs...)
}

// SetLevel mocks base method.
func (m *MockService) SetLevel(level Level) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLevel", level)
}

// SetLevel indicates an expected call of SetLevel.
func (mr *MockServiceMockRecorder) SetLevel(level any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLevel", reflect.TypeOf((*MockService)(nil).SetLevel), level)
}

// Warn mocks base method.
func (m *MockService) Warn(ctx context.Context, msg string, fields ...any) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockServiceMockRecorder) Warn(ctx, msg any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockService)(nil).Warn), varargs...)
}
